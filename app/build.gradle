buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "de.ahlfeld.breminale"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 4
        versionName "1.0.3"
        buildConfigField "String", "BREMINALE_API_KEY", getApiKey("BREMINALE_API_KEY")
        buildConfigField "String", "TWITTER_KEY", getApiKey("TWITTER_KEY")
        buildConfigField "String", "TWITTER_SECRET", getApiKey("TWITTER_SECRET")
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}
retrolambda {
    jdk System.getenv("JAVA8_HOME") ?: getJavaHome("1.8")
    oldJdk System.getenv("JAVA7_HOME") ?: getJavaHome("1.7")
    javaVersion JavaVersion.VERSION_1_7

}

String getJavaHome(String version) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "/usr/libexec/java_home", "-v", version
        standardOutput = stdout;
    }
    return stdout.toString().trim()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    //Ui stuff

    //Google maps
    //GCM
    //RxAndroid
    //Rest

    //Image loading

    //Twitter
    compile('com.twitter.sdk.android:twitter:1.13.1@aar') {
        transitive = true
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.6@aar') {
        transitive = true;
    }
    //Debugging
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.roughike:bottom-bar:1.3.4'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.androidmapsextensions:android-maps-extensions:2.2.1'
    compile 'com.google.android.gms:play-services-maps:9.0.2'
    compile 'com.google.android.gms:play-services-gcm:9.0.2'
    compile 'com.google.android.gms:play-services-analytics:9.0.2'
    compile 'io.reactivex:rxjava:1.1.2'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.squareup.retrofit2:retrofit:2.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.+'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.github.bumptech.glide:glide:3.5.2'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    compile 'com.uphyca:stetho_realm:0.9.0'
}

//return a BREMINALE API KEY from a properties file.
def getApiKey(String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream('/Users/bjornahlfeld/breminale_android_mvvm/.breminale_api_key'))
    return "\"" + properties.getProperty(property) + "\""
}

apply plugin: 'com.google.gms.google-services'